{"Id":23,"Title":"php5正则表达式（POSIX和PERL）","Slug":"php-match","Text":"正则表达式（Regular Expression，缩写为regexp，regex或regxp)，又称正规表达式、正规表示式或常规表达式或正规化表示法或正规表示法，是指一个用 来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。在很多文本编辑器或其他工具里，正则表达式通常被用来检索和/或替换那些符合某个模式的文本 内容。许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的在正则表达式引擎。正则表达式这个概念最初是由 Unix中的工具软件（例如sed和grep）普及开的。（摘自维基百科）\n\nPHP同时使用两套正则表达式规则，一套是由电气和电子工程师协会（IEEE）制定的POSIX Extended 1003.2兼容正则（事实上PHP对此标准的支持并不完善），另一套来自PCRE（Perl Compatible Regular Expression）库提供PERL兼容正则，这是个开放源代码的软件，作者为 Philip Hazel。\n\n使用POSIX兼容规则的函数有： \n\nereg_replace() \n\nereg() \n\neregi() \n\neregi_replace() \n\nsplit() \n\nspliti() \n\nsql_regcase() \n\nmb_ereg_match() \n\nmb_ereg_replace() \n\nmb_ereg_search_getpos() \n\nmb_ereg_search_getregs() \n\nmb_ereg_search_init() \n\nmb_ereg_search_pos() \n\nmb_ereg_search_regs() \n\nmb_ereg_search_setpos() \n\nmb_ereg_search() \n\nmb_ereg() \n\nmb_eregi_replace() \n\nmb_eregi() \n\nmb_regex_encoding() \n\nmb_regex_set_options() \n\nmb_split()\n\n使用PERL兼容规则的函数有： \n\npreg_grep() \n\npreg_replace_callback() \n\npreg_match_all() \n\npreg_match() \n\npreg_quote() \n\npreg_split() \n\npreg_replace()\n\n定界符：\n\nPOSIX兼容正则没有定界符，函数的相应参数会被认为是正则。\n\nPERL兼容正则可以使用任何不是字母、数字或反斜线（\\）的字符作为定界符，如果作为定界符的字符必须被用在表达式本身中，则需要用反斜线转义。也可以使用()，{}，[] 和 \u003c\u003e 作为定界符\n\n修正符：\n\nPOSIX兼容正则没有修正符。\n\nPERL兼容正则中可能使用的修正符（修正符中的空格和换行被忽略，其它字符会导致错误）：\n\ni (PCRE_CASELESS)： \n\n匹配时忽略大小写。\n\nm（PCRE_MULTILINE）： \n\n当设定了此修正符，行起始(^)和行结束($)除了匹配整个字符串开头和结束外，还分别匹配其中的换行符(\\n)的之后和之前。\n\ns（PCRE_DOTALL）： \n\n如果设定了此修正符，模式中的圆点元字符（.）匹配所有的字符，包括换行符。没有此设定的话，则不包括换行符。\n\nx（PCRE_EXTENDED）： \n\n如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略。\n\ne： \n\n如果设定了此修正符，preg_replace() 在替换字符串中对逆向引用作正常的替换，将其作为 PHP 代码求值，并用其结果来替换所搜索的字符串。 只有 preg_replace() 使用此修正符，其它 PCRE 函数将忽略之。\n\nA（PCRE_ANCHORED）： \n\n如果设定了此修正符，模式被强制为“anchored”，即强制仅从目标字符串的开头开始匹配。\n\nD（PCRE_DOLLAR_ENDONLY）： \n\n如果设定了此修正符，模式中的行结束($)仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，也会被匹配在里面。如果设定了 m 修正符则忽略此选项。\n\nS： \n\n当一个模式将被使用若干次时，为加速匹配起见值得先对其进行分析。如果设定了此修正符则会进行额外的分析。目前，分析一个模式仅对没有单一固定起始字符的 non-anchored 模式有用。\n\nU（PCRE_UNGREEDY）： \n\n使“?”的默认匹配成为贪婪状态的。\n\nX（PCRE_EXTRA）： \n\n模式中的任何反斜线后面跟上一个没有特殊意义的字母导致一个错误，从而保留此组合以备将来扩充。默认情况下，一个反斜线后面跟一个没有特殊意义的字母被当成该字母本身。\n\nu（PCRE_UTF8）： \n\n模式字符串被当成UTF-8。\n\n逻辑区隔：\n\nPOSIX兼容正则和PERL兼容正则的逻辑区隔符号作用和使用方法完全一致： \n\n[]：包含任选一操作的相关信息。 \n\n{}：包含匹配次数的相关信息。 \n\n()：包含一个逻辑区间的相关信息，可被用来进行引用操作。\n\n|：表示“或”，[ab]和a|b是等价的。\n\n元字符与“[]”相关：\n\n有两组不同的元字符：一种是模式中除了方括号内都能被识别的，还有一种是在方括号“[]”内被识别的。\n\nPOSIX兼容正则和PERL兼容正则“[]之外”“一致”的元字符： \n\n\\ 有数种用途的通用转义符 \n\n^ 匹配字符串的开头 \n\n$ 匹配字符串的结尾 \n\n? 匹配0或者1 \n\n\\* 匹配 0 个或多个前面指定类型的字符 \n\n\\+ 匹配 1 个或多个前面指定类型的字符\n\nPOSIX兼容正则和PERL兼容正则“[]之外”“不一致”的元字符： \n\n\\. PERL兼容正则匹配除了换行符外的任意一个字符 \n\n\\. POSIX兼容正则匹配任意一个字符\n\nPOSIX兼容正则和PERL兼容正则“[]之内”“一致”的元字符： \n\n\\ 有数种用途的通用转义符 \n^ 取反字符，但仅当其为第一个字符时有效 \n\n\\- 指定字符ASCII范围，仔细研究ASCII码，你会发现[W-c]等价于[WXYZ\\\\^_`abc]\n\nPOSIX兼容正则和PERL兼容正则“[]之内”“不一致”的元字符： \n\n\\- POSIX兼容正则中[a-c-e]的指定会抛出错误。 \n\n\\- PERL兼容正则中[a-c-e]的指定等价于[a-e]。\n\n匹配次数与“{}”相关：\n\nPOSIX兼容正则和PERL兼容正则在匹配次数方面完全一致： \n\n{2}：表示匹配前面的字符2次 \n\n{2,}：表示匹配前面的字符2次或多次，默认都是贪婪（尽可能多）的匹配 \n\n{2,4}：表示匹配前面的字符2次或4次\n\n\n逻辑区间与“()”相关：\n\n使用()包含起来的区域是一个逻辑区间，逻辑区间的主要作用是体现出一些字符出现的逻辑次序，另一个用处就是可以用来引用（可以将此区间内的值引用给一个变量）。\n\n后一个作用比较奇特：\n\n    \u003c?php \n    $str = \"http://www.163.com/\"; \n    // POSIX兼容正则： \n    echo ereg_replace(\"(.+)\",\"\u003ca href = \\\\1 \u003e\\\\1\u003c/a\u003e\",$str); \n    // PERL兼容正则： \n    echo preg_replace(\"/(.+)/\",\"\u003ca href = $1 \u003e$1\u003c/a\u003e\",$str); \n    // 显示两个链接 \n    ?\u003e\n\n在引用的时候，括号是可以嵌套的，逻辑次序是按照“(”出现的次序来标定的。\n\n类型匹配：\n\nPOSIX兼容正则： \n\n[:upper:]：匹配所有的大写字母 \n\n[:lower:]：匹配所有的小写字母 \n\n[:alpha:]：匹配所有的字母 \n\n[:alnum:]：匹配所有的字母和数字 \n\n[:digit:]：匹配所有的数字 \n\n[:xdigit:]：匹配所有的十六进制字符，等价于[0-9A-Fa-f] \n\n[:punct:]：匹配所有的标点符号，等价于[.,\"'?!;:] \n\n[:blank:]：匹配空格和TAB，等价于[ \\t] \n\n[:space:]：匹配所有的空白字符，等价于[ \\t\\n\\r\\f\\v] \n\n[:cntrl:]：匹配所有ASCII 0到31之间的控制符。 \n\n[:graph:]：匹配所有的可打印字符，等价于：[^ \\t\\n\\r\\f\\v] \n\n[:print:]：匹配所有的可打印字符和空格，等价于：[^\\t\\n\\r\\f\\v] \n\n[.c.]：功能不明 \n\n[=c=]：功能不明 \n\n[:\u003c:]：匹配单词的开始 \n\n[:\u003e:]：匹配单词的结尾\n\nPERL兼容正则（这里可以看出PERL正则的强大）： \n\n\\a alarm，即 BEL 字符（’0） \n\n\\cx \"control-x\"，其中 x 是任意字符 \n\n\\e escape（’0B） \n\n\\f 换页符 formfeed（’0C） \n\n\\n 换行符 newline（’0A） \n\n\\r 回车符 carriage return（’0D） \n\n\\t 制表符 tab（’0） \n\n\\xhh 十六进制代码为 hh 的字符 \n\n\\ddd 八进制代码为 ddd 的字符，或 backreference \n\n\\d 任一十进制数字 \n\n\\D 任一非十进制数的字符 \n\n\\s 任一空白字符 \n\n\\S 任一非空白字符 \n\n\\w 任一“字”的字符 \n\n\\W 任一“非字”的字符 \n\n\\b 字分界线 \n\n\\B 非字分界线 \n\n\\A 目标的开头（独立于多行模式） \n\n\\Z 目标的结尾或位于结尾的换行符前（独立于多行模式） \n\n\\z 目标的结尾（独立于多行模式） \n\n\\G 目标中的第一个匹配位置","Tags":["php"],"CreateTime":1415975440,"EditTime":1415975440,"UpdateTime":1415975440,"IsComment":true,"IsLinked":false,"AuthorId":5,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":1}